import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

class LinkedListNode<T> {
    T data;
    LinkedListNode<T> next;
    
    public LinkedListNode(T data) {
        this.data = data;
    }
}

public class Runner {
    
    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    
    public static LinkedListNode<Integer> takeInput() throws IOException {
        LinkedListNode<Integer> head = null, tail = null;

        String[] datas = br.readLine().trim().split("\\s");

        int i = 0;
        while(i < datas.length && !datas[i].equals("-1")) {
            int data = Integer.parseInt(datas[i]);
            LinkedListNode<Integer> newNode = new LinkedListNode<Integer>(data);
            if(head == null) {
                head = newNode;
                tail = newNode;
            }
            else {
                tail.next = newNode;
                tail = newNode;
            }
            i += 1;
        }

        return head;
    }
    
    public static void print(LinkedListNode<Integer> head){
        while(head != null) {
            System.out.print(head.data + " ");
            head = head.next;
        }
        
        System.out.println();
    }
    
    public static void main(String[] args) throws NumberFormatException, IOException {
        
        int t = Integer.parseInt(br.readLine().trim());

        while (t > 0) {

            LinkedListNode<Integer> head = takeInput(); 

            LinkedListNode<Integer> newHead = Solution.evenAfterOdd(head);
            print(newHead);

            t -= 1;
        }

    }
}



/*

    Following is the Node class already written for the Linked List

    class LinkedListNode<T> {
        T data;
        LinkedListNode<T> next;
    
        public LinkedListNode(T data) {
            this.data = data;
        }
    }

*/



public class Solution 
{
    public static LinkedListNode<Integer> evenAfterOdd(LinkedListNode<Integer> head)
    {
        LinkedListNode<Integer> eh=null,et=null,oh=null,ot=null;
        while(head!=null){
            if(head.data%2==0){
                if(eh==null && et==null)
                {
                    eh=head;
                    et=head;

                }
                else{
                    et.next=head;
                    et=head;

                }
                head=head.next;
            }
            else{
                if(oh==null && ot==null)
                {
                    oh=head;
                    ot=head;
                }
                else{
                    ot.next=head;
                    ot=head;
                }
                head=head.next;
            }
        }
        if(oh!=null){
            ot.next=eh;
        }
        else{
            return eh;
        }
        if(eh!=null){
            et.next=null;
        }
        return oh;
    }
}
//or
/*
public class Solution 
{
    public static LinkedListNode<Integer> sortEvenOdd(LinkedListNode<Integer> head) 
    {   if(head==null)
        return head;
     if(head.next==null)
         return head;

     LinkedListNode<Integer> smallHead=sortEvenOdd(head.next);
     LinkedListNode<Integer> temp=smallHead;
     if(head.data%2==0)
     {   if(temp.data%2==0)
     {head.next=temp;
      return head;}
         while(temp.next!=null && temp.next.data%2!=0)
         {
             temp=temp.next;
         }
        // if(temp.next==null){
        //     head.next=temp;
        //     return head;}

         LinkedListNode<Integer> t1=temp.next;
         temp.next=head;
         head.next=t1;
         return smallHead;}
     else 
     {
         head.next=smallHead;

         return head;}
    }
}
*/




OUTPUT:


Sample Input 1 :
1
1 4 5 2 -1
Sample Output 1 :
1 5 4 2 


Sample Input 2 :
2
1 11 3 6 8 0 9 -1
10 20 30 40 -1
Sample Output 2 :
1 11 3 9 6 8 0
10 20 30 40
