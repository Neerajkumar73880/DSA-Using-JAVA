import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

class LinkedListNode<T> {
    T data;
    LinkedListNode<T> next;
    
    public LinkedListNode(T data) {
        this.data = data;
    }
}

public class Runner {
    
    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    
    public static LinkedListNode<Integer> takeInput() throws IOException {
        LinkedListNode<Integer> head = null, tail = null;

        String[] datas = br.readLine().trim().split("\\s");

        int i = 0;
        while(i < datas.length && !datas[i].equals("-1")) {
            int data = Integer.parseInt(datas[i]);
            LinkedListNode<Integer> newNode = new LinkedListNode<Integer>(data);
            if(head == null) {
                head = newNode;
                tail = newNode;
            }
            else {
                tail.next = newNode;
                tail = newNode;
            }
            i += 1;
        }

        return head;
    }
    
    public static void print(LinkedListNode<Integer> head){
        while(head != null) {
            System.out.print(head.data + " ");
            head = head.next;
        }
        
        System.out.println();
    }
    
    public static void main(String[] args) throws NumberFormatException, IOException {
        
        int t = Integer.parseInt(br.readLine().trim());

        while (t > 0) {

            LinkedListNode<Integer> head = takeInput(); 

            LinkedListNode<Integer> mid = Solution.midPoint(head);
            
            if (mid != null) {
                System.out.println(mid.data);
            }

            t -= 1;
        }

    }
}


/*

    Following is the Node class already written for the Linked List

    class LinkedListNode<T> {
        T data;
        LinkedListNode<T> next;
    
        public LinkedListNode(T data) {
            this.data = data;
        }
    }

*/

public class Solution {
    
    public static int length(LinkedListNode<Integer> head){
		//Your code goes here
        if(head==null){
            return 0;
        }
        LinkedListNode<Integer> current = head;
        int count = 0;
        while(current !=null){
            count = count+1;
            current = current.next;
        }
        return count;
	}
    
    public static LinkedListNode<Integer> midPoint(LinkedListNode<Integer> head) {
        //Your code goes here
        LinkedListNode<Integer> slow = head;
        LinkedListNode<Integer> fast = head;
        if(head==null){
            return slow;
        }
        if(length(head)%2==0){
        	while(fast.next.next!=null){
            	slow=slow.next;
            	fast=fast.next.next;
            
        	}
        	return slow;
        }
        while(fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;
            
        }
        return slow;
        
    }

}



OUTPUT:-

Sample Input 1 :
1
1 2 3 4 5 -1
Sample Output 1 :
3


Sample Input 2 :
2 
-1
1 2 3 4 -1
Sample Output 2 :
2
